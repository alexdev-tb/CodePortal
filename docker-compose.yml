x-runner-go: &runner-go
  build:
    context: ./docker/runner
    dockerfile: go.Dockerfile
  restart: unless-stopped
  read_only: true
  tty: true
  stdin_open: true
  security_opt:
    - no-new-privileges:true
  volumes:
    - /tmp/jobs:/tmp/jobs:rw
  labels:
    sandbox.language: go
  tmpfs:
    - /tmp/go-build
    - /tmp/go-mod

x-runner-python: &runner-python
  build:
    context: ./docker/runner
    dockerfile: python.Dockerfile
  restart: unless-stopped
  read_only: true
  tty: true
  stdin_open: true
  security_opt:
    - no-new-privileges:true
  volumes:
    - /tmp/jobs:/tmp/jobs:rw
  labels:
    sandbox.language: python

x-runner-node: &runner-node
  build:
    context: ./docker/runner
    dockerfile: node.Dockerfile
  restart: unless-stopped
  read_only: true
  tty: true
  stdin_open: true
  security_opt:
    - no-new-privileges:true
  volumes:
    - /tmp/jobs:/tmp/jobs:rw
  labels:
    sandbox.language: node

services:
  runner-go-1:
    <<: *runner-go
    container_name: codeportal-runner-go-1

  runner-go-2:
    <<: *runner-go
    container_name: codeportal-runner-go-2

  runner-python-1:
    <<: *runner-python
    container_name: codeportal-runner-python-1

  runner-python-2:
    <<: *runner-python
    container_name: codeportal-runner-python-2

  runner-node-1:
    <<: *runner-node
    container_name: codeportal-runner-node-1

  runner-node-2:
    <<: *runner-node
    container_name: codeportal-runner-node-2

  redis:
    image: redis:7.2-alpine
    container_name: codeportal-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data

  postgres:
    image: postgres:16-alpine
    container_name: codeportal-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: codeportal_accounts
      POSTGRES_USER: codeportal
      POSTGRES_PASSWORD: codeportal-dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis-data:
  postgres-data:
